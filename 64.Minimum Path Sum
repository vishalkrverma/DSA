import java.util.Arrays;

class Solution {

    public int result(int[][] dp, int[][] grid, int m, int n) {
        if (m < 0 || n < 0) {
            return Integer.MAX_VALUE;
        }
        if (m == 0 && n == 0) {
            return grid[0][0];
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }

        int fromTop = result(dp, grid, m - 1, n);
        int fromLeft = result(dp, grid, m, n - 1);

        dp[m][n] = grid[m][n] + Math.min(fromTop, fromLeft);
        return dp[m][n];
    }

    public int minPathSum(int[][] grid) {
        int n = grid.length;       // rows
        int m = grid[0].length;    // cols

        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return result(dp, grid, n - 1, m - 1);  // 🛠️ FIXED: Correct parameter order
    }
}
