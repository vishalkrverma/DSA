import java.util.*;
public class Graph {
    static class Edge {
        int src;
        int des;
        int cost;

        Edge(int src, int des, int cost) {
            this.src = src;
            this.des = des;
            this.cost = cost;
        }
    }

    public static void bfs(ArrayList<Edge>[] al) {
        boolean[] vis = new boolean[al.length];
        Queue<Integer> q = new LinkedList<>();
        q.add(0);

        while (!q.isEmpty()) {
            int curr = q.poll();
            if (!vis[curr]) {
                System.out.print(curr + " ");
                vis[curr] = true;
                for (Edge e : al[curr]) {
                    if (!vis[e.des]) {
                        q.add(e.des);
                    }
                }
            }
        }
    }

    static void createGraph(ArrayList<Edge>[] al) {
        for (int i = 0; i < al.length; i++) {
            al[i] = new ArrayList<>();
        }

        al[0].add(new Edge(0, 1, 5));

        al[1].add(new Edge(1, 0, 5));
        al[1].add(new Edge(1, 3, 3));

        al[2].add(new Edge(2, 1, 1));
        al[2].add(new Edge(2, 3, 1));
        al[2].add(new Edge(2, 4, 4));

        al[3].add(new Edge(3, 1, 3));
        al[3].add(new Edge(3, 2, 1));

        al[4].add(new Edge(4, 2, 2));
    }

    public static void main(String[] args) {
        int v = 5;

        ArrayList<Edge>[] al = new ArrayList[v];
        createGraph(al);

        bfs(al);

        // To print the neighbors of node 2
        // Uncomment the following lines to test:
        // for (int i = 0; i < al[2].size(); i++) {
        //     Edge e = al[2].get(i);
        //     System.out.print(e.des + " ");
        // }
    }
}
