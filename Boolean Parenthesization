class Solution{ 
    static final int MOD = 1003;
    public static int countWays(int n, String s) {
        int[][][] dp = new int[n][n][2];
        for (int[][] row : dp) {
            for (int[] col : row) {
                col[0] = -1;
                col[1] = -1;
            }
        }
        return countWaysUtil(s, 0, n - 1, true, dp);
    }
    private static int countWaysUtil(String s,int i,int j,boolean isTrue,int[][][] dp){
        if (i > j) return 0; // Invalid case
        if (i == j) {
            if (isTrue) return s.charAt(i) == 'T' ? 1 : 0;
            else return s.charAt(i) == 'F' ? 1 : 0;
        }

        int isTrueInt = isTrue ? 1 : 0;
        if (dp[i][j][isTrueInt] != -1) return dp[i][j][isTrueInt];

        int ways = 0;

        for (int k = i + 1; k < j; k += 2) { // Operators are at odd indices
            char operator = s.charAt(k);

            int leftTrue = countWaysUtil(s, i, k - 1, true, dp);
            int leftFalse = countWaysUtil(s, i, k - 1, false, dp);
            int rightTrue = countWaysUtil(s, k + 1, j, true, dp);
            int rightFalse = countWaysUtil(s, k + 1, j, false, dp);

            if (operator == '&') {
                if (isTrue) {
                    ways += (leftTrue * rightTrue) % MOD;
                } else {
                    ways += (leftTrue * rightFalse) % MOD +
                            (leftFalse * rightTrue) % MOD +
                            (leftFalse * rightFalse) % MOD;
                }
            } 
            else if (operator == '|') {
                if (isTrue) {
                    ways += (leftTrue * rightTrue) % MOD +
                            (leftTrue * rightFalse) % MOD +
                            (leftFalse * rightTrue) % MOD;
                } 
                else {
                    ways += (leftFalse * rightFalse) % MOD;
                }
            } 
            else if (operator == '^') {
                if (isTrue) {
                    ways += (leftTrue * rightFalse) % MOD +
                            (leftFalse * rightTrue) % MOD;
                } 
                else {
                    ways += (leftTrue * rightTrue) % MOD +
                            (leftFalse * rightFalse) % MOD;
                }
            }

            ways %= MOD;
        }

        dp[i][j][isTrueInt] = ways;
        return ways;
        
    }
}
