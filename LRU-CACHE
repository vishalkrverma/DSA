class LRUCache {
    private int capacity;
    private Map<Integer, Node> cache; // Stores key and reference to the node in the doubly linked list
    private DoublyLinkedList dll; // To track usage order

    // Constructor
    LRUCache(int cap) {
        this.capacity = cap;
        this.cache = new HashMap<>();
        this.dll = new DoublyLinkedList();
    }

    // Get method
    public int get(int key) {
        if (!cache.containsKey(key)) {
            return -1; // Key not found
        }

        // Move the accessed node to the front of the list (mark as recently used)
        Node node = cache.get(key);
        dll.moveToFront(node);
        return node.value;
    }

    // Put method
    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            // If key exists, update value and move to the front
            Node node = cache.get(key);
            node.value = value;
            dll.moveToFront(node);
        } else {
            // If key does not exist, add a new node
            if (cache.size() == capacity) {
                // Evict least recently used (tail of the list)
                Node lru = dll.removeTail();
                cache.remove(lru.key);
            }
            // Add new node to the front
            Node newNode = new Node(key, value);
            dll.addToFront(newNode);
            cache.put(key, newNode);
        }
    }

    // Doubly linked list implementation for tracking usage order
    private static class DoublyLinkedList {
        private Node head, tail;

        DoublyLinkedList() {
            head = new Node(0, 0);
            tail = new Node(0, 0);
            head.next = tail;
            tail.prev = head;
        }

        void addToFront(Node node) {
            node.next = head.next;
            node.prev = head;
            head.next.prev = node;
            head.next = node;
        }

        void moveToFront(Node node) {
            remove(node);
            addToFront(node);
        }

        Node removeTail() {
            Node node = tail.prev;
            remove(node);
            return node;
        }

        void remove(Node node) {
            node.prev.next = node.next;
            node.next.prev = node.prev;
        }
    }

    // Node class for the doubly linked list
    private static class Node {
        int key, value;
        Node prev, next;

        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
}
